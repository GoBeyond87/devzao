@model Application.Dtos.CriarProdutoDto

@{
    ViewData["Title"] = "Novo Produto";
}

<div id="produto-criar-page" class="container">
    <div id="produto-criar-breadcrumb" class="row mb-4">
        <div class="col">
            <nav aria-label="Navegação">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a id="link-voltar-lista" asp-action="Index">
                            <i class="fas fa-boxes me-1" aria-hidden="true"></i>Produtos
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">Novo</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-12 col-lg-10 col-xl-8">
            <div id="produto-form-card" class="card shadow-sm">
                <div class="card-header bg-primary text-white d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                    <h1 id="produto-form-titulo" class="h4 mb-2 mb-md-0">
                        <i id="produto-form-titulo-icon" class="fas fa-plus-circle me-2" aria-hidden="true"></i>Adicionar Novo Produto
                    </h1>
                    <div id="produto-id" class="badge bg-light text-dark mt-2 mt-md-0 ms-md-2" style="flex-shrink: 0; visibility: hidden;">
                        <i class="fas fa-hashtag me-1" aria-hidden="true"></i>ID: 
                    </div>
                </div>
                <div class="card-body">
                    <form id="form-produto" asp-action="Create" class="needs-validation" novalidate>
                        <div id="erros-validacao" asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>
                        
                        <div id="campo-nome" class="mb-4">
                            <label asp-for="Nome" id="label-nome" class="form-label fw-bold">@Html.DisplayNameFor(model => model.Nome)</label>
                            <div class="input-group" id="input-group-nome">
                                <input asp-for="Nome" 
                                       id="input-nome" 
                                       class="form-control" 
                                       required 
                                       maxlength="100" 
                                       aria-required="true"
                                       aria-describedby="ajuda-nome contador-nome" />
                            </div>
                            <div class="d-flex justify-content-between mt-2" id="contador-container-nome">
                                <div id="ajuda-nome" class="form-text">
                                    Nome do produto (obrigatório, máximo de 100 caracteres)
                                </div>
                                <div class="text-muted small" id="contador-wrapper-nome">
                                    <span id="contador-nome">0/100</span>
                                </div>
                            </div>
                            <span id="erro-nome" asp-validation-for="Nome" class="text-danger d-block"></span>
                        </div>

                        <div id="campo-descricao" class="mb-4">
                            <label id="label-descricao" class="form-label fw-bold" for="Descricao">Descrição</label>
                            <div id="textarea-wrapper-descricao">
                                <textarea asp-for="Descricao" 
                                         id="input-descricao" 
                                         class="form-control" 
                                         rows="3" 
                                         maxlength="500"
                                         aria-describedby="ajuda-descricao contador-descricao"></textarea>
                            </div>
                            <div class="d-flex justify-content-between mt-2" id="contador-container-descricao">
                                <div id="ajuda-descricao" class="form-text">
                                    Descrição detalhada do produto (opcional, máximo 500 caracteres)
                                </div>
                                <div class="text-muted small" id="contador-wrapper-descricao">
                                    <span id="contador-descricao">0/500</span>
                                </div>
                            </div>
                            <span id="erro-descricao" asp-validation-for="Descricao" class="text-danger d-block"></span>
                        </div>

                        <div class="row">
                            <div id="campo-preco" class="col-12 col-md-6 mb-4">
                                <label asp-for="Preco" id="label-preco" class="form-label fw-bold">Preço</label>
                                <div class="input-group" id="input-group-preco">
                                    <span class="input-group-text" id="moeda-preco">R$</span>
                                    <input asp-for="Preco" 
                                           id="preco" 
                                           class="form-control" 
                                           type="number" 
                                           step="0.01" 
                                           min="0.01"
                                           max="999999.99"
                                           maxlength="9"
                                           required
                                           aria-required="true"
                                           aria-describedby="ajuda-preco contador-preco" />
                                </div>
                                <div class="d-flex justify-content-between mt-2" id="contador-container-preco">
                                    <div id="ajuda-preco" class="form-text">
                                        Informe o preço do produto
                                    </div>
                                    <div class="text-muted small" id="contador-wrapper-preco">
                                        <span id="contador-preco">0,00</span>
                                    </div>
                                </div>
                                <span id="erro-preco" asp-validation-for="Preco" class="text-danger d-block"></span>
                            </div>

                            <div id="campo-estoque" class="col-12 col-md-6 mb-4">
                                <label id="label-estoque" class="form-label fw-bold" for="QuantidadeEmEstoque">Estoque</label>
                                <div id="input-wrapper-estoque">
                                    <input asp-for="QuantidadeEmEstoque" 
                                           id="quantidade-estoque" 
                                           class="form-control" 
                                           type="number"
                                           min="0"
                                           max="999999"
                                           maxlength="6"
                                           value="0"
                                           aria-describedby="ajuda-estoque" />
                                </div>
                                <div id="ajuda-estoque" class="form-text">
                                    Quantidade disponível em estoque
                                </div>
                                <span id="erro-estoque" asp-validation-for="QuantidadeEmEstoque" class="text-danger d-block"></span>
                            </div>
                        </div>

                        <div id="acoes" class="d-flex flex-column flex-sm-row justify-content-between gap-2">
                            <a id="btn-cancelar" asp-action="Index" class="btn btn-outline-secondary order-2 order-sm-1">
                                <i id="icon-cancelar" class="fas fa-times me-1" aria-hidden="true"></i>Cancelar
                            </a>
                            <button id="btn-salvar" type="submit" class="btn btn-primary order-1 order-sm-2">
                                <i id="icon-salvar" class="fas fa-save me-1" aria-hidden="true"></i>Salvar Produto
                            </button>
                        </div>
                    </form>
                </div>
                <div class="card-footer text-muted small">
                    <div id="info-rodape" class="d-flex justify-content-between">
                        <div id="info-data">
                            <i id="icon-data" class="far fa-calendar-alt me-1" aria-hidden="true"></i>
                            <span id="texto-data">@DateTime.Now.ToString("dd/MM/yyyy HH:mm")</span>
                        </div>
                        <div id="info-campos-obrigatorios" class="text-end">
                            <span class="text-danger">*</span> <span id="texto-campos-obrigatorios">Campos obrigatórios</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Estilos específicos para o formulário de criação */
        #produto-form-card {
            border: none;
            border-radius: 0.5rem;
            overflow: hidden;
        }

        /* Melhorias de acessibilidade para campos de formulário */
        label {
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .form-control:focus, .form-select:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

        .input-group-text {
            background-color: #f8f9fa;
            color: #000 !important;
        }

        /* Estilo para campos obrigatórios */
        .required-field::after {
            content: " *";
            color: #dc3545;
        }

        /* Melhorias para validação */
        .field-validation-error {
            display: block;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }

        .input-validation-error {
            border-color: #dc3545;
            padding-right: calc(1.5em + 0.75rem);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .input-validation-error:focus {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
        }

        /* Estilo para mensagens de validação */
        .validation-summary-errors ul {
            margin-bottom: 0;
            padding-left: 1.5rem;
        }

        /* Melhorias para leitores de tela */
        .visually-hidden,
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        /* Melhorias de responsividade */
        @@media (max-width: 767.98px) {
            .form-label {
                margin-bottom: 0.25rem;
            }
            
            .form-control, .form-select {
                margin-bottom: 0.5rem;
            }
            
            .card-header h1 {
                font-size: 1.1rem;
            }
            
            .btn {
                width: 100%;
            }
            
            #acoes {
                gap: 0.75rem;
            }
            
            .input-group-text {
                min-width: 2.5rem;
                justify-content: center;
            }
        }
        
        /* Melhorias para telas muito pequenas */
        @@media (max-width: 400px) {
            .breadcrumb {
                font-size: 0.85rem;
            }
            
            .card-header h1 {
                font-size: 1rem;
            }
            
            #produto-id {
                font-size: 0.8rem;
                padding: 0.35em 0.65em;
            }
        }
        
        /* Melhorias para o rodapé em telas pequenas */
        .card-footer.text-muted {
            padding: 0.75rem;
        }
        
        #info-rodape {
            flex-direction: column;
            gap: 0.5rem;
            text-align: center;
        }
        
        #info-rodape > div {
            width: 100%;
            justify-content: center !important;
        }
        
        @@media (min-width: 576px) {
            #info-rodape {
                flex-direction: row;
                justify-content: space-between;
                text-align: left;
            }
            
            #info-rodape > div {
                width: auto;
                justify-content: flex-start !important;
            }
        }
        
        /* Melhorias para campos de formulário */
        .form-control:disabled, .form-control[readonly] {
            background-color: #f8f9fa;
            opacity: 1;
        }
        
        /* Melhorias para validação */
        .field-validation-error {
            font-size: 0.85em;
        }
        
        .input-validation-error {
            border-color: #dc3545;
            padding-right: calc(1.5em + 0.75rem);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }
    </style>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Função para inicializar os contadores
        function inicializarContadores() {
            console.log('Inicializando contadores...');
            
            // Contadores de caracteres
            const nomeInput = document.getElementById('input-nome');
            const nomeContador = document.getElementById('contador-nome');
            const descricaoInput = document.getElementById('input-descricao');
            const descricaoContador = document.getElementById('contador-descricao');
            const precoInput = document.getElementById('preco');
            const precoContador = document.getElementById('contador-preco');

            console.log('Elementos encontrados:', {
                nomeInput: !!nomeInput,
                nomeContador: !!nomeContador,
                descricaoInput: !!descricaoInput,
                descricaoContador: !!descricaoContador,
                precoInput: !!precoInput,
                precoContador: !!precoContador
            });

            // Atualiza contadores
            function atualizarContador(input, contador, max) {
                if (!input || !contador) {
                    console.error('Input ou contador não encontrado');
                    return;
                }
                
                const length = input.value ? input.value.length : 0;
                console.log(`Atualizando contador: ${length}/${max}`);
                
                contador.textContent = `${length}/${max}`;
                
                // Altera a cor se estiver próximo do limite
                if (length > max * 0.9) {
                    contador.classList.add('text-danger');
                    contador.classList.remove('text-muted');
                } else {
                    contador.classList.remove('text-danger');
                    contador.classList.add('text-muted');
                }
            }

            // Inicializa contadores
            if (nomeInput && nomeContador) {
                nomeInput.addEventListener('input', function() {
                    console.log('Input do nome alterado');
                    atualizarContador(nomeInput, nomeContador, 100);
                });
                // Inicializa com o valor atual
                console.log('Inicializando contador do nome');
                atualizarContador(nomeInput, nomeContador, 100);
            }

            if (descricaoInput && descricaoContador) {
                descricaoInput.addEventListener('input', function() {
                    console.log('Input da descrição alterado');
                    atualizarContador(descricaoInput, descricaoContador, 500);
                });
                // Inicializa com o valor atual
                console.log('Inicializando contador da descrição');
                atualizarContador(descricaoInput, descricaoContador, 500);
            }

            // Atualiza o contador de preço
            if (precoInput && precoContador) {
                precoInput.addEventListener('input', function() {
                    precoContador.textContent = this.value ? parseFloat(this.value).toFixed(2).replace('.', ',') : '0,00';
                });
                // Inicializa com o valor atual
                precoContador.textContent = precoInput.value ? parseFloat(precoInput.value).toFixed(2).replace('.', ',') : '0,00';
            }
        }

        // Aguarda o carregamento completo do DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', inicializarContadores);
        } else {
            // DOM já carregado
            inicializarContadores();
        }

        // Validação personalizada para o formulário
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('form-produto');
            if (form) {
                form.addEventListener('submit', function(event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            }
        });

        // Função para limitar o número de caracteres em um campo numérico
        function limitarCaracteres(input, maxLength) {
            if (input.value.length > maxLength) {
                input.value = input.value.slice(0, maxLength);
            }
        }

        // Inicialização dos eventos
        document.addEventListener('DOMContentLoaded', function() {
            const precoInput = document.getElementById('preco');
            const quantidadeInput = document.getElementById('quantidade-estoque');

            // Limitar caracteres no campo de preço (9 caracteres)
            if (precoInput) {
                precoInput.addEventListener('input', function() {
                    limitarCaracteres(this, 9);
                });
            }

            // Limitar caracteres no campo de quantidade (6 caracteres)
            if (quantidadeInput) {
                quantidadeInput.addEventListener('input', function() {
                    limitarCaracteres(this, 6);
                });
            }
        });
    </script>
}
